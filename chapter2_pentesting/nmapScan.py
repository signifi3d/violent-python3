'''
    Note:
        -In the book there is an error in the way this program is used.
         The optparse library doesn't support multiple arguments without
         first creating an extended action. If you'd like to use it as is
         then surround the list of ports with quotes. Otherwise, you can
         remove the space between each port number and list them on the 
         command line as such: 21,22,80,1720. To do this you will need to 
         change the split that grabs the port numbers like this:
            
            tgtPorts = str(options.tgtPort).split(',')

        Additionally you could extend the actions in optparse to accept
        multiple space separated values, but I will leave that implementation
        to you.
'''
import nmap
import optparse


def nmapScan(tgtHost, tgtPort):
    nmScan = nmap.PortScanner()
    nmScan.scan(tgtHost, tgtPort)
    state = nmScan[tgtHost]['tcp'][int(tgtPort)]['state']

    print(" [*] " + tgtHost + " tcp/" + tgtPort + " " + state)


def main():
    parser = optparse.OptionParser(
        'usage%prog -H <starget host> -p <target port>')
    parser.add_option(
        '-H', dest='tgtHost', type='string', 
        help='specify target host')
    parser.add_option(
        '-p', dest='tgtPort', type='string',
        help='specify target port[s] separated by comma')
    (options, args) = parser.parse_args()

    tgtHost = options.tgtHost
    tgtPorts = str(options.tgtPort).split(', ')

    if (tgtHost is None) or (tgtPorts[0] is None):
        print(parser.usage)
        exit(0)

    for tgtPort in tgtPorts:
        nmapScan(tgtHost, tgtPort)


if __name__ == '__main__':
    main()
